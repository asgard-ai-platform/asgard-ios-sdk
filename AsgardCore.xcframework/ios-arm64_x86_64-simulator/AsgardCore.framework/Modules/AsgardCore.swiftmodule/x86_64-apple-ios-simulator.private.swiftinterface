// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name AsgardCore
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Combine
import Foundation
import Speech
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers final public class Asgard {
  public static func getVersion() -> Swift.String
  public static func getChatbot(config: AsgardCore.AsgardConfig) -> AsgardCore.AsgardChatbot
  public static func pushChatbot(config: AsgardCore.AsgardConfig, uiConfig: AsgardCore.AsgardUIConfig, from viewController: UIKit.UIViewController)
  public static func presentChatbot(config: AsgardCore.AsgardConfig, uiConfig: AsgardCore.AsgardUIConfig, from viewController: UIKit.UIViewController)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AsgardChatbot {
  final public func sendMessage(_ text: Swift.String, action: Swift.String = "NONE", customMessageId: Swift.String = "")
  final public func start()
  final public func closed()
  final public func reset()
  @objc deinit
}
public enum AsgardError : Swift.Error {
  case notInitialized
  case invalidApiKey
  case invalidEndpoint
  case invalidBotProviderEndpoint
  case serviceError(Swift.String)
  case invalidResponse
  case invalidURL
}
public struct AsgardConfig {
  public let apiKey: Swift.String
  public let endpoint: Swift.String
  public let botProviderEndpoint: Swift.String
  public let customChannelId: Swift.String
  public let isShowDebugLogs: Swift.Bool
  public let transformSsePayload: ((Swift.String) -> Swift.Void)?
  public let onExecutionError: ((any Swift.Error) -> Swift.Void)?
  public var onReset: (() -> Swift.Void)?
  public let onClose: (() -> Swift.Void)?
  public init(apiKey: Swift.String, endpoint: Swift.String, botProviderEndpoint: Swift.String, customChannelId: Swift.String, isShowDebugLogs: Swift.Bool = false, transformSsePayload: ((Swift.String) -> Swift.Void)? = nil, onExecutionError: ((any Swift.Error) -> Swift.Void)? = nil, onReset: (() -> Swift.Void)? = nil, onClose: (() -> Swift.Void)? = nil)
}
public struct AsgardSpeechConfig {
  public struct Text {
    public var startSpeaking: Swift.String
    public var listening: Swift.String
    public var noSpeechDetected: Swift.String
    public var micPermissionDenied: Swift.String
    public var speechPermissionDenied: Swift.String
    public var deviceNotSupported: Swift.String
    public var requestPermission: Swift.String
    public var unknownError: Swift.String
    public init(startSpeaking: Swift.String = "Please start speaking...", listening: Swift.String = "Listening...", noSpeechDetected: Swift.String = "No speech detected.\n\nPlease tap the microphone icon below\nto try again.", micPermissionDenied: Swift.String = "Microphone access is required for this feature.\n\nPlease enable microphone access in\nyour device's system settings.", speechPermissionDenied: Swift.String = "Speech recognition access is required for this feature.\n\nPlease enable speech recognition in\nyour device's system settings.", deviceNotSupported: Swift.String = "Speech recognition is not supported on this device", requestPermission: Swift.String = "Please allow speech recognition access", unknownError: Swift.String = "An unexpected error occurred")
  }
  public var text: AsgardCore.AsgardSpeechConfig.Text
  public var locale: Foundation.Locale
  public var isEnabled: Swift.Bool
  public init(text: AsgardCore.AsgardSpeechConfig.Text, locale: Foundation.Locale, isEnabled: Swift.Bool = true)
}
public struct AsgardThemeConfig {
  public let chatbot: AsgardCore.AsgardChatbotStyle
  public let botMessage: AsgardCore.AsgardMessageStyle
  public let userMessage: AsgardCore.AsgardMessageStyle
  public init(chatbot: AsgardCore.AsgardChatbotStyle = AsgardChatbotStyle(), botMessage: AsgardCore.AsgardMessageStyle = AsgardMessageStyle(), userMessage: AsgardCore.AsgardMessageStyle = AsgardMessageStyle())
}
public struct AsgardChatbotStyle {
  public let themeColor: UIKit.UIColor?
  public let textColor: UIKit.UIColor?
  public let tintColor: UIKit.UIColor?
  public let borderColor: UIKit.UIColor?
  public init(themeColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, tintColor: UIKit.UIColor? = nil, borderColor: UIKit.UIColor? = nil)
}
public struct AsgardMessageStyle {
  public let backgroundColor: UIKit.UIColor?
  public let textColor: UIKit.UIColor?
  public let timerColor: UIKit.UIColor?
  public init(backgroundColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, timerColor: UIKit.UIColor? = nil)
}
public struct AsgardUIConfig {
  public let title: Swift.String?
  public let avatar: Swift.String?
  public let debugMode: Swift.Bool?
  public let inputPlaceholder: Swift.String
  public let botTypingPlaceholder: Swift.String?
  public let theme: AsgardCore.AsgardThemeConfig
  public let initMessages: [Swift.String]?
  public let connectionErrorMessage: Swift.String
  public let speechRecognition: AsgardCore.AsgardSpeechConfig?
  public let onUIReset: (() -> Swift.Void)?
  public let onUIClose: (() -> Swift.Void)?
  public init(title: Swift.String? = nil, avatar: Swift.String? = nil, debugMode: Swift.Bool? = nil, inputPlaceholder: Swift.String, botTypingPlaceholder: Swift.String? = nil, theme: AsgardCore.AsgardThemeConfig = AsgardThemeConfig(), initMessages: [Swift.String]? = nil, connectionErrorMessage: Swift.String, speechRecognition: AsgardCore.AsgardSpeechConfig? = nil, onUIReset: (() -> Swift.Void)? = nil, onUIClose: (() -> Swift.Void)? = nil)
  public static var `default`: AsgardCore.AsgardUIConfig {
    get
  }
}
public enum AsgardColor {
  public static let theme: UIKit.UIColor
  public static let text: UIKit.UIColor
  public static let tint: UIKit.UIColor
  public static let border: UIKit.UIColor
  public static let botMessageBox: UIKit.UIColor
  public static let botMessageText: UIKit.UIColor
  public static let userMessageBox: UIKit.UIColor
  public static let userMessageText: UIKit.UIColor
  public static let timerText: UIKit.UIColor
  public static func hex(_ hex: Swift.String) -> UIKit.UIColor
}
@objc public enum ALogDisplayLevel : Swift.Int {
  case none
  case normal
  case full
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension AsgardCore.ALogDisplayLevel : Swift.Equatable {}
extension AsgardCore.ALogDisplayLevel : Swift.Hashable {}
extension AsgardCore.ALogDisplayLevel : Swift.RawRepresentable {}
